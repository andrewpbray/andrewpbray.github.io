Intro to R and RStudio
========================================================
incremental: true

Three Key Principes
========================================================
- **Object:** Everything that exists is an object
- **Function:** Everything that happens is a function call
- **Interface:** R is built on interfaces to many algorithms


R is free and open source
========================================================

**Free:** Free. Base R is maintained by about 20 volunteers.

But what is meant by **Open source**?

- Anyone can access the source code.
- Anyone can modify the source code.
- Anyone can expand R by writing their own *package* and host it on CRAN.


Package: ggmap
========================================================
![ggmap](ggmap.png)


Package: igraph
========================================================
![igraph](igraph.png)


Package: wesanderson
========================================================
![wesanderson](wesanderson.png)


RStudio
========================================================
type: section


RStudio
========================================================
An Integrated Development Environment (IDE) for R.  Free and open source.

Four panes:

1. Source
2. Console
3. Environment
4. Files/plots/help



========================================================
type: prompt
RStudio is also fairly customizable.

Please go in and change your settings so that you're using a color scheme that
is different than the default one.


R Basics
========================================================
type: section


R is a calculator
========================================================
- You can `+`, `-`, `/`, `*`.
- You can save objects.
- Spaces don't matter.


Vectors
========================================================
type: section


Vectors
========================================================
*"Everything is a vector"*

...including scalars, matrices, arrays.


Must be of the same mode:

- integer
- numeric (fp)
- character (string)
- logical (boolean)
- complex

...except for `NA`.


Generating Vectors
========================================================
type: section


Generating Vectors
========================================================

```{r}
v <- 7
v
c(1:30, v)
l <- c("a", "b", "c", "d")
c(l, v)
```


: operator
========================================================

```{r}
5:8
```

Watch for order of operations.

```{r}
i <- 5
1:i - 1
1:(i - 1)
```


seq() and rep()
========================================================
```{r}
seq(5, 8)
seq(10, 20, 5)
rep(5, 8)
rep(1:5, 2)
```


Vector Operations
========================================================
type: section


Vector Math
========================================================
```{r}
x <- c(1, 2, 4)
y <- c(1, 2, 1)
x + y
x + 1
```


Vector Math
========================================================
```{r}
x * y
x %*% y
```


Vector Indexing
========================================================
Use square brackets to pick out sub-vectors.

```{r}
letters[1:4]
letters[c(1, 3)]
z <- c(1, 3, 7)
z[-1]
```


Vector Indexing
========================================================
type: prompt

Consider the vector `x <- c(12,15,8,11,24)`.  How do we create a vector of the
differences between adjacent elements?

```{r}
x <- c(12, 15, 8, 11, 24)
x[-1] - x[-length(x)]
```

Work in vectors instead of loops where possible.


Vector Subsetting/Filtering
========================================================
What's going on here?

```{r}
x <- c(12, 15, 8, 11, 24)
x[x < 10]
x < 10
```

We can index our vector with a logical vector of the same length.


Subsetting with logicals
========================================================

```{r}
x <- c(12, 15, 8, 11, 24)
i <- c(F, F, T, F, F)
x[i]
which(x < 10)
x[x < 10] <- 10
x
```


Useful fact!
========================================================

```{r}
i <- c(F, F, T, F, F)
sum(i)
mean(i)
x <- c(12, 15, 8, 11, 24)
mean(x > 11)
```


Logical operators
========================================================
`<` less than

`<=` less than or equal

`>` greater than

`>=` greater than or equal

`==` exactly equal to

***

`!=` not equal to

`!x` not equal to x

`x | y` x or y

`x & y` x and y


========================================================
type: prompt
How can you subset the following vector to exclude both elements less than 10 
and all even elements? (hint: `%%`)

```{r}
x <- c(12, 15, 8, 11, 24)
```

```{r}
x[x > 10 & x %% 2 == 1]
```



Activity: Vector Generation and Subsetting
========================================================
type: alert
