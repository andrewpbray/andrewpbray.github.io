library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
headerPanel("NFL Player Heights and Weights Over Time"),
sidebarPanel(
#sliderInput("yr", "Year:", min = 1920, max = 2014, value = updateTracker()),
selectInput(inputId = "secPause",
label = "Seconds between displays:",
choices = c(1.5, 2, 2.5),
selected = 1.5)
),
mainPanel(
plotOutput("scatterPlot")
)
))
shiny::runApp()
shiny::runApp()
nfl <- read.csv("data/nfl.csv")
getwd()
shiny::runApp()
nfl <- read.csv("data/nfl.csv")
updates <- 1919
updater <- function(updates){ updates + 1 }
nfl <- read.csv("nfl.csv")
shiny::runApp()
nfl <- read.csv("data\nfl.csv")
nfl <- read.csv("data/nfl.csv")
shiny::runApp()
shinyUI(pageWithSidebar(
headerPanel("NFL Player Heights and Weights Over Time"),
sidebarPanel(
#sliderInput("yr", "Year:", min = 1920, max = 2014, value = updateTracker()),
selectInput(inputId = "secPause",
label = "Seconds between displays:",
choices = c(1.5, 2, 2.5),
selected = 1.5)
),
mainPanel(
plotOutput("scatterPlot")
)
))
updates <- 1919
updater <- function(updates){ updates + 1 }
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
deployApp(appName = 'nfl')
get()
getwd()
?deployApp
setwd("~/Dropbox/Teaching/ShinyApps/NFL Test App 2")
shiny::runApp()
setwd("~/Dropbox/Teaching/github-pages/andrewpbray.github.io")
n <- 60
beta_0 <- 12
beta_1 <- .7
sigma <- 2
x <- rnorm(n, mean = 20, sd = 3)
plot(20, 25, xlim = c(12, 28), ylim = c(17, 35), ylab = "y", xlab = "x", type = "n") # set up an empty plot
abline(a = beta_0, b = beta_1, col = "orange", lwd = 2) # add mean function
f_mean <- beta_0 + beta_1 * x # mean function
f_data <- f_mean + rnorm(n, mean = 0, sd = sigma) # data generating function
points(x, f_data, pch = 16, col = "steelblue") # add generated data
f_mean <- beta_0 + beta_1 * x # mean function
f_data <- f_mean + rnorm(n, mean = 0, sd = sigma) # data generating function
points(x, f_data, pch = 16, col = "steelblue") # add generated data
f_mean <- beta_0 + beta_1 * x # mean function
f_data <- f_mean + rnorm(n, mean = 0, sd = sigma) # data generating function
points(x, f_data, pch = 16, col = "steelblue") # add generated data
m1 <- lm(f_data ~ x)
m1
abline(m1)
f_mean <- beta_0 + beta_1 * x # mean function
f_data <- f_mean + rnorm(n, mean = 0, sd = sigma) # data generating function
points(x, f_data, pch = 16, col = "steelblue") # add generated data
# try to recover the true mean function
m1 <- lm(f_data ~ x)
m1
abline(m1)
it <- 5000
coef_mat <- matrix(rep(NA, it * 2), ncol = 2)
for(i in 1:it) {
x <- rnorm(n, mean = 20, sd = 3)
f_mean <- beta_0 + beta_1 * x
f_data <- f_mean + rnorm(n, mean = 0, sd = sigma)
coef_mat[i, ] <- lm(f_data ~ x)$coef
}
plot(20, 25, xlim = c(12, 28), ylim = c(17, 35), ylab = "y", xlab = "x", type = "n") # set up an empty plot
points(x, f_data, pch = 16, col = "steelblue") # add generated data
for(i in 1:it) {
abline(coef_mat[i, 1], coef_mat[i, 2], col = rgb(0, 0, 0, 0.02))
}
abline(a = beta_0, b = beta_1, col = "orange", lwd = 2) # add mean function
